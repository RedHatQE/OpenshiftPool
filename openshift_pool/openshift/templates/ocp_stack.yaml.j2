---
heat_template_version: 2013-05-23

description: >
  HOT template to create a new neutron network plus a router to the public
  network, and for deploying two servers into the new network.
  The template also assigns floating IP addresses to each server so they are
  routable from the public network.
parameters:
  dns:
    type: comma_delimited_list
    label: DNS nameservers
    description: |
        Comma separated list of DNS nameservers for the private network.
    default: ''

resources:
  private_net:
    type: OS::Neutron::Net
    properties:
      name: {{ params['private_net_name'] }}

  private_subnet:
    type: OS::Neutron::Subnet
    properties:
      network_id: { get_resource: private_net }
      cidr: {{ params['private_net_cidr'] }}
      gateway_ip: {{ params['private_net_gateway'] }}
      dns_nameservers: { get_param: dns }
      allocation_pools:
        - start: {{ params['private_net_pool_start'] }}
          end: {{ params['private_net_pool_end'] }}

  router:
    type: OS::Neutron::Router
    properties:
      external_gateway_info:
        network: {{ params['public_net'] }}

  router_interface:
    type: OS::Neutron::RouterInterface
    properties:
      router_id: { get_resource: router }
      subnet_id: { get_resource: private_subnet }

{% for name, _ in params['instances'] %}

  {{ name }}:
    type: OS::Nova::Server
    properties:
      name:
        str_replace:
          template: {{ name }}.suffix%.{{ params['dns_zone'] }}
          params:
            "suffix%": { get_attr: [ ocp_deployment_pqdn, value ] }
      image: {{ params['image'] }}
      flavor: {{ params['flavor'] }}
      key_name: {{ params['key_name']}}
      networks:
        - port: { get_resource: {{ name }}_port }
      user_data_format: SOFTWARE_CONFIG
      user_data: { get_resource: server_init }

  {{ name }}_port:
    type: OS::Neutron::Port
    properties:
      network_id: { get_resource: private_net }
      fixed_ips:
        - subnet_id: { get_resource: private_subnet }

  {{ name }}_floating_ip:
    type: OS::Neutron::FloatingIP
    properties:
      floating_network: {{ params['public_net'] }}
      port_id: { get_resource: {{ name }}_port }

{% endfor %}

  boot_config:
    type: OS::Heat::CloudConfig
    properties:
      cloud_config:
        final_message: >
            cloud-init boot finished at $TIMESTAMP. Up $UPTIME seconds

  boot_script:
    type: OS::Heat::SoftwareConfig
    properties:
      group: ungrouped
      config: |
        #!/bin/bash
        sed -i -e 's/^Defaults\s\+requiretty/# \0/' /etc/sudoers

  server_init:
    type: OS::Heat::MultipartMime
    properties:
      parts:
        - config: { get_resource: boot_config }
        - config: { get_resource: boot_script }

  ocp_deployment_pqdn:
    type: OS::Heat::RandomString
    properties:
      length: 5
      salt: {{ params['stack_name'] }}
      # We need to make this string dns-name compatible.
      character_classes:
        - { "min": 1, "class": lowercase }
        - { "min": 1, "class": digits }

outputs:
  ocp_deployment_pqdn:
    description: The suffix of the instances names
    value: { get_attr: [ ocp_deployment_pqdn, value ] }
{% for name, type in params['instances'] %}
  {{ name }}_private_ip:
    description: IP address of {{ name }} in private network
    value: { get_attr: [ {{ name }}, first_address ] }
  {{ name }}_public_ip:
    description: Floating IP address of {{ name }} in public network
    value: { get_attr: [ {{ name }}_floating_ip, floating_ip_address ] }
  {{ name }}_name:
    description: Instance name of the openshift node.
    value: { get_attr: [ {{ name }}, name ] }
  {{ name }}_instance_type:
    description: The type of the stack instance
    value: {{ type }}
{% endfor %}
    